/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import java.awt.Toolkit;

import java.io.FileOutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFrame;
/**
 *
 * @author angel
 */
public class formVentas extends javax.swing.JFrame {

    usuarios mod;
    Conexion cn = new Conexion();
    FormLogin fl = new FormLogin();
    Connection con = cn.getConnection();
    PreparedStatement ps;
    ResultSet rs;

    public formVentas() {
        initComponents();
        cargarTabla();
        cargarCliente();
        cargarZapato();
        cargarVendedor();
        cargarProveedores();
        lbProducto.setVisible(false);
        lbIdCliente.setVisible(false);
        lbVendedor.setVisible(false);
        txtId.setVisible(false);
        lbProveedor.setVisible(false);
        setLocationRelativeTo(null);
        
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        String rutaImagen = "/Componentes/personaje.png";
        java.awt.Image icono = Toolkit.getDefaultToolkit().getImage(getClass().getResource(rutaImagen));
        setIconImage(icono);

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnReporte = new LIB.FSButtonMD();
        Panel1 = new javax.swing.JPanel();
        txtCantidad = new LIB.FSTexFieldMD();
        btnEliminar = new LIB.FSButtonMD();
        btnModificar = new LIB.FSButtonMD();
        btnLimpiar = new LIB.FSButtonMD();
        btnGuardar = new LIB.FSButtonMD();
        cbxCliente = new javax.swing.JComboBox<>();
        cbxProductos = new javax.swing.JComboBox<>();
        cbxVendedor = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lbProducto = new javax.swing.JLabel();
        lbVendedor = new javax.swing.JLabel();
        lbIdCliente = new javax.swing.JLabel();
        buscar = new LIB.FSTexFieldMD();
        txtId = new javax.swing.JTextField();
        btnBuscar = new LIB.FSButtonMD();
        jLabel7 = new javax.swing.JLabel();
        cbxProveedor = new javax.swing.JComboBox<>();
        lbProveedor = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 63, 99));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Ventas");

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/ic_clear_128_28306.png"))); // NOI18N
        jLabel16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel16MouseClicked(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Componentes/back_arrow_5821.png"))); // NOI18N
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Componentes/test2.png"))); // NOI18N
        jLabel8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Componentes/test2.png"))); // NOI18N
        jLabel9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(303, 303, 303)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(30, 30, 30)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(271, 271, 271))
        );

        jPanel5.setBackground(new java.awt.Color(161, 165, 166));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Registro de Datos");

        btnReporte.setText("Generar Reporte");
        btnReporte.setColorPressed(new java.awt.Color(0, 204, 51));
        btnReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 867, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(360, 360, 360)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnReporte, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnReporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        Panel1.setBackground(new java.awt.Color(161, 165, 166));
        Panel1.setForeground(new java.awt.Color(204, 204, 204));

        txtCantidad.setBackground(new java.awt.Color(161, 165, 166));
        txtCantidad.setForeground(new java.awt.Color(0, 0, 0));
        txtCantidad.setBordeColorFocus(new java.awt.Color(25, 25, 25));
        txtCantidad.setBordeColorNoFocus(new java.awt.Color(0, 0, 0));
        txtCantidad.setCaretColor(new java.awt.Color(0, 0, 0));
        txtCantidad.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txtCantidad.setMaterialDesing(true);
        txtCantidad.setPlaceholder("Cantidad");
        txtCantidad.setSelectedTextColor(new java.awt.Color(51, 51, 51));
        txtCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadKeyTyped(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.setColorNormal(new java.awt.Color(255, 0, 0));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnModificar.setBackground(new java.awt.Color(0, 51, 153));
        btnModificar.setText("Modificar");
        btnModificar.setColorNormal(new java.awt.Color(0, 51, 153));
        btnModificar.setColorPressed(new java.awt.Color(0, 51, 153));
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnLimpiar.setBackground(new java.awt.Color(204, 102, 0));
        btnLimpiar.setText("Limpiar");
        btnLimpiar.setColorNormal(new java.awt.Color(204, 102, 0));
        btnLimpiar.setColorPressed(new java.awt.Color(204, 102, 0));
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.setColorPressed(new java.awt.Color(0, 204, 51));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        cbxCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        cbxCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxClienteActionPerformed(evt);
            }
        });

        cbxProductos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        cbxProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxProductosActionPerformed(evt);
            }
        });

        cbxVendedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        cbxVendedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxVendedorActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("Clientes:");

        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Productos:");

        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("Vendedor:");

        buscar.setBackground(new java.awt.Color(161, 165, 166));
        buscar.setForeground(new java.awt.Color(0, 0, 0));
        buscar.setBordeColorFocus(new java.awt.Color(25, 25, 25));
        buscar.setBordeColorNoFocus(new java.awt.Color(0, 0, 0));
        buscar.setCaretColor(new java.awt.Color(0, 0, 0));
        buscar.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        buscar.setMaterialDesing(true);
        buscar.setPlaceholder("Buscar por ID");
        buscar.setSelectedTextColor(new java.awt.Color(51, 51, 51));
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });
        buscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                buscarKeyTyped(evt);
            }
        });

        txtId.setEnabled(false);
        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.setColorNormal(new java.awt.Color(255, 255, 0));
        btnBuscar.setColorPressed(new java.awt.Color(255, 255, 0));
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Proveedores:");

        cbxProveedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        cbxProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxProveedorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel1Layout = new javax.swing.GroupLayout(Panel1);
        Panel1.setLayout(Panel1Layout);
        Panel1Layout.setHorizontalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel1Layout.createSequentialGroup()
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85)
                        .addComponent(lbProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Panel1Layout.createSequentialGroup()
                                .addComponent(txtId)
                                .addGap(74, 74, 74)
                                .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9))
                            .addGroup(Panel1Layout.createSequentialGroup()
                                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbxCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbxProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(26, 26, 26)))
                        .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Panel1Layout.createSequentialGroup()
                                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbxVendedor, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbxProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7)))
                            .addGroup(Panel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(75, 75, 75)
                                .addComponent(lbProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbVendedor, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        Panel1Layout.setVerticalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel1Layout.createSequentialGroup()
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxVendedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(23, Short.MAX_VALUE))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbVendedor, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lbProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel16MouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jLabel16MouseClicked

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        // TODO add your handling code here:
        int rowSelect = tabla.rowAtPoint(evt.getPoint());

        txtCantidad.setText(tabla.getValueAt(rowSelect,3).toString());
        cbxCliente.setSelectedItem(tabla.getValueAt(rowSelect, 5));
        cbxProductos.setSelectedItem(tabla.getValueAt(rowSelect, 6));
        cbxVendedor.setSelectedItem(tabla.getValueAt(rowSelect, 7));
    }//GEN-LAST:event_tablaMouseClicked

    private void txtCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if(Character.isLetter(validar)){
            evt.consume();
            JOptionPane.showMessageDialog(null, "Ingrese solo Números");
        }
    }//GEN-LAST:event_txtCantidadKeyTyped

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        String Nombre = txtId.getText();
        int respuesta = JOptionPane.showConfirmDialog(null, "Seguro desea eliminar a " + Nombre);
        if(respuesta==JOptionPane.YES_OPTION){
            eliminarDatos();
        }else{

        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        
        if(txtCantidad.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "rellenar las cajas de texto");
        }else{
             actualizaDatos();
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
       
        if(txtCantidad.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "rellenar las cajas de texto");
        }else{
             insertData();
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void cbxClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxClienteActionPerformed
        // TODO add your handling code here:
        cliente cliente=(cliente) cbxCliente.getSelectedItem();
        String id = cliente.getID();
        lbIdCliente.setText(id);
    }//GEN-LAST:event_cbxClienteActionPerformed

    private void cbxProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxProductosActionPerformed
        // TODO add your handling code here:
        zapato zapato=(zapato) cbxProductos.getSelectedItem();
        String id = zapato.getID();
        lbProducto.setText(id);
    }//GEN-LAST:event_cbxProductosActionPerformed

    private void cbxVendedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxVendedorActionPerformed
        // TODO add your handling code here:
        vendedor vendedor=(vendedor) cbxVendedor.getSelectedItem();
        String id = vendedor.getID();
        lbVendedor.setText(id);
    }//GEN-LAST:event_cbxVendedorActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buscarActionPerformed

    private void buscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscarKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if(Character.isLetter(validar)){
            evt.consume();
            JOptionPane.showMessageDialog(null, "Ingrese solo Números");
        }
    }//GEN-LAST:event_buscarKeyTyped

    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        buscar();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        // TODO add your handling code here:
        sqlUsuarios modSql = new sqlUsuarios();
        usuarios mod = new usuarios();
        if (mod != null) {
            this.dispose();
            MainMenu frmHome = new MainMenu(mod);
            frmHome.setVisible(true);
        } else {
            System.out.println("Error: el objeto 'mod' es nulo.");
        }
    }//GEN-LAST:event_jLabel4MouseClicked

    private void cbxProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxProveedorActionPerformed
        proveedores proveedores=(proveedores) cbxProveedor.getSelectedItem();
        String id = proveedores.getID();
        lbProveedor.setText(id);
    }//GEN-LAST:event_cbxProveedorActionPerformed

    private void btnReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReporteActionPerformed
        // TODO add your handling code here:
        generarReportePDF();
    }//GEN-LAST:event_btnReporteActionPerformed

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel9MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new formVentas().setVisible(true);
            }
        });
    }
    
        public void insertData() {
            try {
                int idProducto = Integer.parseInt(lbProducto.getText());
                int cantidad = Integer.parseInt(txtCantidad.getText());

                
                ps = con.prepareStatement("SELECT nombreProducto, cantidadProducto, precioUnitario FROM producto WHERE codigoProducto = ?");
                ps.setInt(1, idProducto);
                rs = ps.executeQuery();

                if (rs.next()) {
                    String nombreProducto = rs.getString("nombreProducto");
                    int cantidadDisponible = rs.getInt("cantidadProducto");
                    double precioUnitario = rs.getDouble("precioUnitario");

                    if (cantidad > cantidadDisponible) {
                        JOptionPane.showMessageDialog(null, "No hay suficiente cantidad para realizar la venta. Cantidad disponible: " + cantidadDisponible);
                        return;
                    }

                    double total = precioUnitario * cantidad;

                   
                    int idCliente = Integer.parseInt(lbIdCliente.getText());
                    ps = con.prepareStatement("SELECT nombre, direccion, nit FROM clientes WHERE id_clientes = ?");
                    ps.setInt(1, idCliente);
                    ResultSet rsCliente = ps.executeQuery();

                    String nombreCliente = "", direccionCliente = "", nitCliente = "";
                    if (rsCliente.next()) {
                        nombreCliente = rsCliente.getString("nombre");
                        direccionCliente = rsCliente.getString("direccion");
                        nitCliente = rsCliente.getString("nit");
                    }

                    String mensaje = "Estás a punto de realizar la siguiente venta:\n\n" +
                                     "Producto: " + nombreProducto + "\n" +
                                     "Cantidad: " + cantidad + "\n" +
                                     "Precio Unitario: " + String.format("%.2f", precioUnitario) + "\n" +
                                     "Total a pagar: " + String.format("%.2f", total) + "\n" +
                                     "Cliente: " + nombreCliente + "\n\n" +
                                     "¿Estás seguro de realizar la venta?";

                    int confirmacion = JOptionPane.showConfirmDialog(null, mensaje, "Confirmar Venta", JOptionPane.YES_NO_OPTION);

                    if (confirmacion != JOptionPane.YES_OPTION) {
                        JOptionPane.showMessageDialog(null, "Venta cancelada.");
                        return;
                    }

                   
                    ps = con.prepareStatement("INSERT INTO ventas (cantidad, total, id_clientes, id_producto, id_vendedor, id_proveedor) VALUES (?, ?, ?, ?, ?, ?)");
                    ps.setInt(1, cantidad);
                    ps.setDouble(2, total);
                    ps.setInt(3, idCliente);
                    ps.setInt(4, idProducto);
                    ps.setInt(5, Integer.parseInt(lbVendedor.getText()));
                    ps.setInt(6, Integer.parseInt(lbProveedor.getText()));

                    int res = ps.executeUpdate();
                    if (res > 0) {
                        JOptionPane.showMessageDialog(null, "Venta guardada!");
                        limpiar();
                        cargarTabla();

                       
                        int imprimirFactura = JOptionPane.showConfirmDialog(null, "¿Desea imprimir la factura?", "Imprimir Factura", JOptionPane.YES_NO_OPTION);
                        if (imprimirFactura == JOptionPane.YES_OPTION) {
                            String[][] productos = {
                                {String.valueOf(idProducto), nombreProducto, String.valueOf(cantidad), String.format("%.2f", precioUnitario), String.format("%.2f", total)}
                            };
                            generarFactura(nombreCliente, nitCliente, direccionCliente, LocalDateTime.now(), productos, total, "Angel", "Cancelado");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Error al guardar Venta!");
                        limpiar();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El producto no existe.");
                }
            } catch (HeadlessException | SQLException e) {
                System.err.println(e);
            } finally {
                cn.cerrar();
            }
        }



    
        public void generarFactura(String nombreCliente, String dpiCliente, String direccionCliente, LocalDateTime fechaVenta, 
                                   String[][] productos, double total, String vendedor, String estado) {
            
            Rectangle tamañoPersonalizado = new Rectangle(515, 515); 

            Document documento = new Document(tamañoPersonalizado, 36, 36, 36, 36); 
            try {
                String ruta = "factura_" + System.currentTimeMillis() + ".pdf";
                PdfWriter.getInstance(documento, new FileOutputStream(ruta));

                documento.open();

                // Definir las fuentes
                Font tituloFont = new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD);
                Font textoFont = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL);

                // Agregar título
                Paragraph titulo = new Paragraph("Crunchy", tituloFont);
                titulo.setAlignment(Element.ALIGN_CENTER);
                documento.add(titulo);

                // Información de la empresa
                Paragraph infoEmpresa = new Paragraph(
                    "N.I.T: 259603-5\n" +
                    "5ta av 5-32 Zona 5\n" +
                    "San Miguel Morazan\n" +
                    "RESOLUCION: 2024-06-08\n" +
                    "DE FECHA: 2024-06-08\n" +
                    "SERIE: A1 DE 00003 A 10000\n" +
                    "RESOLUCION VENCE: 2024-12-08\n",
                    textoFont
                );
                infoEmpresa.setAlignment(Element.ALIGN_CENTER);
                documento.add(infoEmpresa);
                documento.add(new Paragraph("\n"));

                
                Paragraph datosCliente = new Paragraph(
                    "Datos del cliente\n\n" +
                    "Cliente: " + nombreCliente + "\n" +
                    "Dirección " + dpiCliente + "\n" +
                    "DPI: " + direccionCliente + "\n" +
                    "Fecha: " + fechaVenta.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")) + "\n",
                    textoFont
                );
                datosCliente.setAlignment(Element.ALIGN_CENTER);
                documento.add(datosCliente);
                documento.add(new Paragraph("\n"));

                // Tabla de productos
                PdfPTable tabla = new PdfPTable(5);
                tabla.setWidthPercentage(80); 
                tabla.setWidths(new float[]{2, 5, 2, 2, 2});
                tabla.setHorizontalAlignment(Element.ALIGN_CENTER);

                PdfPCell cell;
                cell = new PdfPCell(new Phrase("Cod", tituloFont));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                tabla.addCell(cell);

                cell = new PdfPCell(new Phrase("Producto", tituloFont));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                tabla.addCell(cell);

                cell = new PdfPCell(new Phrase("Cant", tituloFont));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                tabla.addCell(cell);

                cell = new PdfPCell(new Phrase("Precio", tituloFont));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                tabla.addCell(cell);

                cell = new PdfPCell(new Phrase("Total", tituloFont));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                tabla.addCell(cell);

                for (String[] producto : productos) {
                    tabla.addCell(new PdfPCell(new Phrase(producto[0], textoFont)));
                    tabla.addCell(new PdfPCell(new Phrase(producto[1], textoFont)));
                    tabla.addCell(new PdfPCell(new Phrase(producto[2], textoFont)));
                    tabla.addCell(new PdfPCell(new Phrase(String.format("%.2f", Double.parseDouble(producto[3])), textoFont)));
                    tabla.addCell(new PdfPCell(new Phrase(String.format("%.2f", Double.parseDouble(producto[4])), textoFont)));
                }

                documento.add(tabla);
                documento.add(new Paragraph("\n"));

                // Total final
                Paragraph totalFinal = new Paragraph("TOTAL: Q. " + String.format("%.2f", total), textoFont);
                totalFinal.setAlignment(Element.ALIGN_CENTER);
                documento.add(totalFinal);
                documento.add(new Paragraph("\n"));

                // Detalles finales
                Paragraph detallesFinales = new Paragraph(
                    "Venta hecha por: " + vendedor + "\n" +
                    "Estado: " + estado + "\n\n" +
                    "SUJETO A PAGOS TRIMESTRALES\n" +
                    "GRACIAS POR TU COMPRA",
                    tituloFont
                );
                detallesFinales.setAlignment(Element.ALIGN_CENTER);
                documento.add(detallesFinales);

                documento.close();

                JOptionPane.showMessageDialog(null, "Factura generada en: " + ruta);
            } catch (Exception e) {
                System.err.println(e);
                JOptionPane.showMessageDialog(null, "Error al generar la factura.");
            }
        }



        
        public void actualizaDatos() {
            try {
                int idVenta = Integer.parseInt(buscar.getText());
                int nuevaCantidad = Integer.parseInt(txtCantidad.getText());
                int idProducto = Integer.parseInt(lbProducto.getText());

                ps = con.prepareStatement("SELECT nombreProducto, cantidadProducto, precioUnitario FROM producto WHERE codigoProducto = ?");
                ps.setInt(1, idProducto);
                rs = ps.executeQuery();

                if (rs.next()) {
                    String nombreProducto = rs.getString("nombreProducto");
                    int cantidadDisponible = rs.getInt("cantidadProducto");
                    double precioUnitario = rs.getDouble("precioUnitario");

                    // Obtener la cantidad actual de la venta
                    ps = con.prepareStatement("SELECT cantidad FROM ventas WHERE id_venta = ?");
                    ps.setInt(1, idVenta);
                    ResultSet rsVenta = ps.executeQuery();

                    int cantidadActualVenta = 0;
                    if (rsVenta.next()) {
                        cantidadActualVenta = rsVenta.getInt("cantidad");
                    }

                    // Calcular la diferencia entre la nueva cantidad y la actual
                    int diferencia = nuevaCantidad - cantidadActualVenta;

                    // Verificar si hay suficiente cantidad disponible
                    if (diferencia > cantidadDisponible) {
                        JOptionPane.showMessageDialog(null, "No hay suficiente cantidad para realizar la actualización. Cantidad disponible: " + cantidadDisponible);
                        return;
                    }

                    double nuevoTotal = precioUnitario * nuevaCantidad;

                    // Confirmación de actualización
                    String mensaje = "Estás a punto de actualizar la siguiente venta:\n\n" +
                                     "Producto: " + nombreProducto + "\n" +
                                     "Cantidad actual: " + cantidadActualVenta + "\n" +
                                     "Nueva cantidad: " + nuevaCantidad + "\n" +
                                     "Precio Unitario: " + String.format("%.2f", precioUnitario) + "\n" +
                                     "Nuevo total a pagar: " + String.format("%.2f", nuevoTotal) + "\n\n" +
                                     "¿Estás seguro de actualizar la venta?";

                    int confirmacion = JOptionPane.showConfirmDialog(null, mensaje, "Confirmar Actualización", JOptionPane.YES_NO_OPTION);

                    if (confirmacion != JOptionPane.YES_OPTION) {
                        JOptionPane.showMessageDialog(null, "Actualización cancelada.");
                        return;
                    }

                    // Actualizar la venta en la base de datos
                    ps = con.prepareStatement("UPDATE ventas SET cantidad = ?, total = ? WHERE id_venta = ?");
                    ps.setInt(1, nuevaCantidad);
                    ps.setDouble(2, nuevoTotal);
                    ps.setInt(3, idVenta);

                    int res = ps.executeUpdate();
                    if (res > 0) {
                        JOptionPane.showMessageDialog(null, "Venta actualizada!");
                        limpiar();
                        cargarTabla();

                        // Confirmación para imprimir factura después de actualizar
                        int imprimirFactura = JOptionPane.showConfirmDialog(null, "¿Desea imprimir la factura?", "Imprimir Factura", JOptionPane.YES_NO_OPTION);
                        if (imprimirFactura == JOptionPane.YES_OPTION) {
                            // Obtener información del cliente para la factura
                            int idCliente = Integer.parseInt(lbIdCliente.getText());
                            ps = con.prepareStatement("SELECT nombre, direccion, nit FROM clientes WHERE id_clientes = ?");
                            ps.setInt(1, idCliente);
                            ResultSet rsCliente = ps.executeQuery();

                            String nombreCliente = "", direccionCliente = "", nitCliente = "";
                            if (rsCliente.next()) {
                                nombreCliente = rsCliente.getString("nombre");
                                direccionCliente = rsCliente.getString("direccion");
                                nitCliente = rsCliente.getString("nit");
                            }

                            // Datos del producto para la factura
                            String[][] productos = {
                                {String.valueOf(idProducto), nombreProducto, String.valueOf(nuevaCantidad), String.format("%.2f", precioUnitario), String.format("%.2f", nuevoTotal)}
                            };

                            // Generar la factura
                            generarFactura(nombreCliente, nitCliente, direccionCliente, LocalDateTime.now(), productos, nuevoTotal, "Angel", "Actualizado");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Error al actualizar venta!");
                        limpiar();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El producto no existe.");
                }
            } catch (HeadlessException | SQLException e) {
                System.err.println(e);
            } finally {
                cn.cerrar();
            }
        }



   
        private double obtenerPrecioProducto(int idProducto) {
            double precio = 0.0;
            try {
                PreparedStatement psPrecio = con.prepareStatement("SELECT precioUnitario FROM producto WHERE codigoProducto = ?");
                psPrecio.setInt(1, idProducto);
                ResultSet rs = psPrecio.executeQuery();
                if (rs.next()) {
                    precio = rs.getDouble("precioUnitario");
                }
                rs.close();
                psPrecio.close();
            } catch (SQLException e) {
                System.err.println(e);
            }
            return precio;
        }
    



    
    public void eliminarDatos() {
        try {
            ps = con.prepareStatement("DELETE FROM ventas WHERE id_venta = ?");
            ps.setInt(1, Integer.parseInt(txtId.getText()));  

            int res = ps.executeUpdate();
            if (res > 0) {
                JOptionPane.showMessageDialog(null, "Venta eliminada!");
                limpiar();
                cargarTabla();
            } else {
                JOptionPane.showMessageDialog(null, "Error al eliminar la venta!");
                limpiar();
            }

        } catch (HeadlessException | SQLException e) {
            System.err.println(e);
        } finally {
            cn.cerrar();
        }
    }

    
    public void cargarCliente(){
        DefaultComboBoxModel value;
      try {         
            Statement stmt = con.createStatement();
            rs = stmt.executeQuery("SELECT id_clientes,nombre FROM clientes ORDER BY id_clientes ASC");       
            value =new DefaultComboBoxModel();
            cbxCliente.setModel(value);
         while (rs.next()) {         
           value.addElement(new cliente(rs.getString("nombre"),rs.getString("id_clientes")));
         }
         rs.close();
        } catch (SQLException ex) {
            System.err.println("Error consulta :" + ex.getMessage());
        }
    }
    
    public void cargarZapato(){
        DefaultComboBoxModel value;
      try {         
            Statement stmt = con.createStatement();
            rs = stmt.executeQuery("SELECT codigoProducto,nombreProducto FROM producto ORDER BY codigoProducto ASC");       
            value =new DefaultComboBoxModel();
            cbxProductos.setModel(value);
         while (rs.next()) {         
           value.addElement(new zapato(rs.getString("nombreProducto"),rs.getString("codigoProducto")));
         }
         rs.close();
        } catch (SQLException ex) {
            System.err.println("Error consulta :" + ex.getMessage());
        }
    }
    
    public void cargarVendedor(){
        DefaultComboBoxModel value;
      try {         
            Statement stmt = con.createStatement();
            rs = stmt.executeQuery("SELECT id_vendedor,nombre FROM vendedor ORDER BY id_vendedor ASC");       
            value =new DefaultComboBoxModel();
            cbxVendedor.setModel(value);
         while (rs.next()) {         
           value.addElement(new vendedor(rs.getString("nombre"),rs.getString("id_vendedor")));
         }
         rs.close();
        } catch (SQLException ex) {
            System.err.println("Error consulta :" + ex.getMessage());
        }
    
    }
    
        public void cargarProveedores(){
        DefaultComboBoxModel value;
      try {         
            Statement stmt = con.createStatement();
            rs = stmt.executeQuery("SELECT id_proveedor,nombre FROM proveedores ORDER BY id_proveedor ASC");       
            value =new DefaultComboBoxModel();
            cbxProveedor.setModel(value);
         while (rs.next()) {         
           value.addElement(new proveedores(rs.getString("nombre"),rs.getString("id_proveedor")));
         }
         rs.close();
        } catch (SQLException ex) {
            System.err.println("Error consulta :" + ex.getMessage());
        }
    
    }
    
    public class zapato {
        private String estilo;
        private String id ;
  
            public zapato(String estilo , String id ) {
              this.estilo=estilo;
              this.id=id;
            }

            public String getID(){
              return id ;
            }

            public String toString() {
              return estilo ;
            }
    }
    
    public class vendedor {
        private String nombre;
        private String id ;
  
            public vendedor(String nombre , String id ) {
              this.nombre=nombre;
              this.id=id;
            }

            public String getID(){
              return id ;
            }

            public String toString() {
              return nombre;
            }
    }
    
    public class cliente {
        private String nombre;
        private String id ;
  
            public cliente(String nombre , String id ) {
              this.nombre=nombre;
              this.id=id;
            }

            public String getID(){
              return id ;
            }

            public String toString() {
              return nombre;
            }
    }
    
        public class proveedores {
        private String nombre;
        private String id ;
  
            public proveedores(String nombre , String id ) {
              this.nombre=nombre;
              this.id=id;
            }

            public String getID(){
              return id ;
            }

            public String toString() {
              return nombre;
            }
    }
    

    
        public void cargarTabla() {
            String[] encabezado = {"No. Venta", "Cantidad", "Total", "Cliente", "Producto", "Vendedor", "Proveedor"};
            String[] contRegistro = new String[7];
            DefaultTableModel modelo = new DefaultTableModel(null, encabezado);

            String query = "SELECT v.id_venta, v.cantidad, v.total, c.nombre AS cliente, p.nombreProducto AS producto, " +
                           "f.nombre AS vendedor, pr.nombre AS proveedor " +
                           "FROM ventas AS v " +
                           "INNER JOIN clientes AS c ON v.id_clientes = c.id_clientes " +
                           "INNER JOIN producto AS p ON v.id_producto = p.codigoProducto " +
                           "INNER JOIN vendedor AS f ON v.id_vendedor = f.id_vendedor " +
                           "INNER JOIN proveedores AS pr ON v.id_proveedor = pr.id_proveedor";

            try {
                Statement st = con.createStatement();
                rs = st.executeQuery(query);

                while (rs.next()) {
                    contRegistro[0] = rs.getString("id_venta");
                    contRegistro[1] = rs.getString("cantidad");
                    contRegistro[2] = rs.getString("total");
                    contRegistro[3] = rs.getString("cliente");
                    contRegistro[4] = rs.getString("producto");
                    contRegistro[5] = rs.getString("vendedor");
                    contRegistro[6] = rs.getString("proveedor");
                    modelo.addRow(contRegistro);
                }
                tabla.setModel(modelo);
                rs.close();
            } catch (SQLException e) {
                System.err.println(e);
            }
        }
 


        
    public void limpiar(){
        txtCantidad.setText(null);
        txtCantidad.setText("");  
        buscar.setText(null);
        buscar.setText(""); 
        cbxCliente.setSelectedIndex(0);
        cbxProductos.setSelectedIndex(0);
        cbxVendedor.setSelectedIndex(0);
    }
    
        public void buscar() {
            try {
                // Consulta SQL para obtener los datos
                ps = con.prepareStatement(
                    "SELECT v.id_venta, v.cantidad, v.total, " +
                    "c.nombre AS cliente_nombre, c.id_clientes, " +
                    "p.nombre AS proveedor_nombre, p.id_proveedor, " +
                    "pr.nombreProducto AS producto_nombre, pr.codigoProducto, " +
                    "f.nombre AS vendedor_nombre, f.id_vendedor " +
                    "FROM ventas AS v " +
                    "INNER JOIN clientes AS c ON v.id_clientes = c.id_clientes " +
                    "INNER JOIN proveedores AS p ON v.id_proveedor = p.id_proveedor " +
                    "INNER JOIN producto AS pr ON v.id_producto = pr.codigoProducto " +
                    "INNER JOIN vendedor AS f ON v.id_vendedor = f.id_vendedor " +
                    "WHERE v.id_venta = ?"
                );
                ps.setString(1, buscar.getText());
                rs = ps.executeQuery();

                
                if (rs.next()) {
                    txtId.setText(rs.getString("id_venta"));
                    txtCantidad.setText(rs.getString("cantidad"));

                    
                    lbIdCliente.setText(rs.getString("id_clientes"));
                    lbProveedor.setText(rs.getString("id_proveedor"));
                    lbProducto.setText(rs.getString("codigoProducto"));
                    lbVendedor.setText(rs.getString("id_vendedor"));

                    
                    cbxCliente.setSelectedItem(rs.getString("cliente_nombre"));
                    cbxProductos.setSelectedItem(rs.getString("producto_nombre"));
                    cbxVendedor.setSelectedItem(rs.getString("vendedor_nombre"));
                    cbxProveedor.setSelectedItem(rs.getString("proveedor_nombre"));
                } else {
                    JOptionPane.showMessageDialog(null, "No existe ninguna venta con esa clave!");
                }
            } catch (Exception e) {
                System.err.println(e);
            }
        }
    
        public void generarReportePDF() {
            Document document = new Document();

            try {
                
                String timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
                String fileName = "ReporteVentas_" + timestamp + ".pdf";

                
                PdfWriter.getInstance(document, new FileOutputStream(fileName));
                document.open();

                
                Font fontTitulo = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
                Paragraph titulo = new Paragraph("Reporte de Ventas", fontTitulo);
                titulo.setAlignment(Element.ALIGN_CENTER);
                document.add(titulo);

                document.add(new Paragraph(" ")); 

                
                PdfPTable table = new PdfPTable(7);
                table.setWidthPercentage(100);

                
                Font fontHeader = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
                String[] headers = {"No. Venta", "Cantidad", "Total", "Cliente", "Producto", "Vendedor", "Proveedor"};

                for (String header : headers) {
                    PdfPCell cell = new PdfPCell(new Phrase(header, fontHeader));
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setBackgroundColor(new BaseColor(192, 192, 192)); 
                    table.addCell(cell);
                }

                
                for (int i = 0; i < tabla.getRowCount(); i++) {
                    for (int j = 0; j < tabla.getColumnCount(); j++) {
                        table.addCell(new PdfPCell(new Phrase(tabla.getValueAt(i, j).toString())));
                    }
                }

                document.add(table); 
                JOptionPane.showMessageDialog(null, "Reporte de ventas generado correctamente: " + fileName);

            } catch (DocumentException | IOException ex) {
                System.err.println("Error al generar PDF: " + ex.getMessage());
                JOptionPane.showMessageDialog(null, "Error al generar reporte de ventas.");
            } finally {
                document.close();
            }
        }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel1;
    private LIB.FSButtonMD btnBuscar;
    private LIB.FSButtonMD btnEliminar;
    private LIB.FSButtonMD btnGuardar;
    private LIB.FSButtonMD btnLimpiar;
    private LIB.FSButtonMD btnModificar;
    private LIB.FSButtonMD btnReporte;
    private LIB.FSTexFieldMD buscar;
    private javax.swing.JComboBox<String> cbxCliente;
    private javax.swing.JComboBox<String> cbxProductos;
    private javax.swing.JComboBox<String> cbxProveedor;
    private javax.swing.JComboBox<String> cbxVendedor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbIdCliente;
    private javax.swing.JLabel lbProducto;
    private javax.swing.JLabel lbProveedor;
    private javax.swing.JLabel lbVendedor;
    private javax.swing.JTable tabla;
    private LIB.FSTexFieldMD txtCantidad;
    private javax.swing.JTextField txtId;
    // End of variables declaration//GEN-END:variables
}
